# -*- coding: utf-8 -*-

server 'localhost', :tengined, :heartbeat_watchd, :resource_watchd, :atd
set  :user              , 'shyouhei'
set  :daemon_user       , 'shyouhei' # 'tengined'
set  :application       , 'tengine_example'
set  :keep_releases     , 3
set  :scm               , :none #:git
set  :repository        , '/Users/shyouhei/data/src/tengine/tengine_example' # 'git://github.com/shyouhei/tengine_example.git'
set  :branch            , 'master'
set  :git_shallow_clone , 1
set  :scm_verbose       , true
set  :copy_cache        , true
set  :copy_strategy     , :export
set  :copy_exclude      , %w'.git'
set  :copy_compression  , :zip
set  :deploy_to         , '/var/lib/tengine_example'
set  :bundle_dir        , './vendor/bundle'
set  :bundle_without    , [:development]
set  :rvm_ruby_string   , 'ruby-1.9.2-p290@tengine_example'
set  :rvm_type          , :user


default_run_options[:pty] = true
default_environment['PATH'] = '/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin'

namespace :deploy do

  task :chown_deploy_path do
    run "#{sudo} chown -R #{daemon_user} #{deploy_to}"
  end
  after "deploy:setup", "deploy:chown_deploy_path"
  before "deploy:start", "deploy:chown_deploy_path"

  task :mkconfig do
    Dir.glob 'config/*.yml.erb' do |fn|
      top.upload fn, "#{release_path}/#{fn}"
    end
  end
  before 'bundle:install', 'deploy:mkconfig'

  task :mkshared do
    run "mkdir -p #{shared_path}/log"
    run "mkdir -p #{shared_path}/tmp"
  end
  after 'deploy:setup', 'deploy:mkshared'

  task :mkversion do
    case scm
    when :git
      result = "0"
      with_env("LC_ALL", "C") {
        result = `git ls-remote #{repository} #{revision || branch}`
      }
      dsl_version = result.split(/[\t\n]/)[0]
    when :subversion
      require 'yaml'
      result = "0"
      with_env("LC_ALL", "C") {
        result = `svn info #{repository} -r#{revision || "HEAD"}`
      }
      yaml = YAML.load(result)
      dsl_version = [(yaml['Last Changed Rev'] || 0).to_i, (yaml['Revision'] || 0).to_i].max
    else
      dsl_version = Time.now.strftime("%Y%m%d%H%M%S")
    end
    puts "make VERSION file @dsl_version = [#{dsl_version.inspect}]"
    top.put "#{dsl_version}\n", "#{release_path}/app/VERSION", :via => :scp
  end
  before 'bundle:install', 'deploy:mkversion'

  if exists?(:rvm_bin_path)
    set :sudo_rvm_bundle, "#{default_shell} rvmsudo -u #{daemon_user} bundle exec"
  else
    set :sudo_rvm_bundle, "sudo -u #{daemon_user} bundle exec"
  end

  task :start do
    on_rollback do
      force_stop
      abort "=== could not start daemon process. ==="
    end
    run "cd #{current_path} && #{sudo_rvm_bundle} rake daemons:start"
  end

  %w(stop force_stop).each do |command|
    task command do
      run "cd #{current_path} && #{sudo_rvm_bundle} rake daemons:#{command}"
    end
  end

  set :daemons, [ :tengined, :heartbeat_watchd, :resource_watchd, :atd ]

  [:tengined, :heartbeat_watchd, :resource_watchd, :atd].each do |daemon|
    namespace daemon do
      task :start, roles: daemon do
        on_rollback do
          force_stop
          abort "=== could not start tengine_atd process. ==="
        end
        run "cd #{current_path} && #{sudo_rvm_bundle} rake daemons:#{daemon}:start"
      end
      %w(stop force_stop).each do |command|
        task command, roles: daemon do
          run "cd #{current_path} && #{sudo_rvm_bundle} rake daemons:#{daemon}:#{command}"
        end
      end
    end
  end
end

# 
# Local Variables:
# mode: ruby
# coding: utf-8-unix
# indent-tabs-mode: nil
# tab-width: 4
# ruby-indent-level: 2
# fill-column: 79
# default-justification: full
# End:
